# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import inference_pb2 as inference__pb2


class InferenceAPIStub(object):
    """The inference api service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetClassification = channel.unary_unary(
                '/inference.InferenceAPI/GetClassification',
                request_serializer=inference__pb2.ImageRequest.SerializeToString,
                response_deserializer=inference__pb2.ImageClassification.FromString,
                )
        self.GetFashionMatchingMNIST = channel.unary_unary(
                '/inference.InferenceAPI/GetFashionMatchingMNIST',
                request_serializer=inference__pb2.ImageRequest.SerializeToString,
                response_deserializer=inference__pb2.FashionMatchingMNIST.FromString,
                )
        self.GetSegmentation = channel.unary_unary(
                '/inference.InferenceAPI/GetSegmentation',
                request_serializer=inference__pb2.ImageRequest.SerializeToString,
                response_deserializer=inference__pb2.ImageResponse.FromString,
                )


class InferenceAPIServicer(object):
    """The inference api service definition.
    """

    def GetClassification(self, request, context):
        """Get classification
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFashionMatchingMNIST(self, request, context):
        """Get fashion matching embedding for fashion-MNIST
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSegmentation(self, request, context):
        """Get Segmentation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetClassification': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClassification,
                    request_deserializer=inference__pb2.ImageRequest.FromString,
                    response_serializer=inference__pb2.ImageClassification.SerializeToString,
            ),
            'GetFashionMatchingMNIST': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFashionMatchingMNIST,
                    request_deserializer=inference__pb2.ImageRequest.FromString,
                    response_serializer=inference__pb2.FashionMatchingMNIST.SerializeToString,
            ),
            'GetSegmentation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSegmentation,
                    request_deserializer=inference__pb2.ImageRequest.FromString,
                    response_serializer=inference__pb2.ImageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'inference.InferenceAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InferenceAPI(object):
    """The inference api service definition.
    """

    @staticmethod
    def GetClassification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inference.InferenceAPI/GetClassification',
            inference__pb2.ImageRequest.SerializeToString,
            inference__pb2.ImageClassification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFashionMatchingMNIST(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inference.InferenceAPI/GetFashionMatchingMNIST',
            inference__pb2.ImageRequest.SerializeToString,
            inference__pb2.FashionMatchingMNIST.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSegmentation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inference.InferenceAPI/GetSegmentation',
            inference__pb2.ImageRequest.SerializeToString,
            inference__pb2.ImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
